JVM：
！类加载过程（类的生命周期），解释各个阶段的意义
！Java类加载器有哪些种类，每种都用来加载什么
！双亲委派，String 类是由那个类加载器加载的
！jvm 类加载器，自定义类加载器，双亲委派机制，优缺点
tomcat类加载机制，tomcat热部署，热加载了解么，怎么做到的

jvm了解哪些参数，用过哪些指令
！常见的GC算法，年轻代和老年代一般用哪种算法
！垃圾回收算法,各有什么优缺点
！young gc 和 full gc的触发条件
！说说CMS垃圾回收的步骤？GC root有哪些？新生代Java1.8默认的垃圾回收器是啥？
！g1 收集器原理，怎么实现可预测停顿的，region的大小，结构
！cms的原理，是否发生stop the world，有什么缺点。
！CMS + ParNew 算法的对象分配 和 垃圾回收流程
！老年代垃圾回收放不下了，会发生什么。答了会继续发生fullgc，触发oom。说不对
！老年代用标记的主要原因是什么。用标记，标记垃圾。如果用复制算法，需要两倍的空间，而且需要复制很多存活的对象。
！old区什么时候触发CMS GC 什么参数 配置大了会怎么样 配置小了会怎么样
！为什么会产生浮动垃圾
！哪些情况下的对象会被垃圾回收机制处理掉？ 利用可达性分析算法，虚拟机会将一些对象定义为GCRoots，从GCRoots出发沿着引用链 向下寻找，如果某个对象不能通过GCRoots寻找到，虚拟机就认为该对象可以被回收掉。
！对象不可达，一定会被垃圾收集器回收么？ 即使不可达，对象也不一定会被垃圾收集器回收，1）先判断对象是否有必要执行finalize()方法，对象必须重写finalize()方法且没有被运行过。2）若有必要执行，会把对象放到一个 队列中，JVM会开一个线程去回收它们，这是对象最后一次可以逃逸清理的机会。
你们垃圾回收器用的什么？ G1有哪些特点？G1如何实现可预测的停顿时间？漏标问题如何解决的？介绍下三色标记？说说STAB算法？
！G1 和 CMS 的区别

！JVM内存模型,jvm运行时数据区有哪些。1.7和1.8的区别
！对象一定分配在堆上么，JIT，分层编译，逃逸分析
！jvm内存结构，堆结构，栈结构，a+b操作数栈过程，方法返回地址什么时候回收，程序计数器什么时候为空
！Java的内存结构，堆分为哪几部分，默认年龄多大进入老年代
！Java的内存结构：程序计数器、虚拟机栈、本地方法栈、堆、方法区。
！Java虚拟机根据对象存活的周期不同，把堆内存划分为几块，一般分为新生代、老年代和永久代。
！默认的设置下，当对象的年龄达到15岁的时候，也就是躲过15次Gc的时候，他就会转移到老年代中去躲过15次GC之后进入老年代。
！垃圾回收是哪个区域？常量池在哪个区域？内存分配机制？如何保证并发？
！jvm 栈 垃圾回收 碎片 stop the world
！堆里面为什么有2个survivor区

JVM 调优过程讲一下？非常细 什么命令 怎么分析的 面板什么样子都有问
！数据如果出现了阻塞，你是怎么排查的，top和jstack命令用过没，jstack命令的nid是什么意思，怎么查看java某个进程的线程
！如何避免内存溢出（JVM参数是否合理，是否存在死循环创建了大量对象，是否存在内存泄漏，用完的引用要及时清理）
！Java什么是内存泄漏吗，三个区分别什么情况下会产生内存泄漏。(见：https://blog.csdn.net/fishinhouse/article/details/80781673)
！JVM有调优经验吗？为什么会产生OOM？什么会引起年轻代频繁回收？
！内存溢出，内存泄漏遇到过么，什么场景产生的，怎么解决的
！cpu使用率高怎么排查(对于cpu飙升的场景，这里有举例：https://blog.csdn.net/h2604396739/article/details/103923458)
！oom怎么排查
！系统变慢了怎么排查
！有生产上堆栈分析的经验吗
生产上有出现线程堵塞的经验吗
不断fullgc怎么处理
！CPU占用率过高可以通过top命令去看占用CPU最多的Java线程，然后用jstack查看对应的Java进程的名称，再结合实际的代码去排查问题；
！OOM的情况下，更多的是根据dump的文件去分析异常、GC
！JVM Full GC怎么降低次数：首先需要知道为什么会进行Full GC，Full GC和Minor GC的区别，然后就可以去回答这个问题了（见:https://heapdump.cn/article/1870333）
！系统优化怎么做，IO怎么排查问题和调优